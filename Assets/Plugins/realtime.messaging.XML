<?xml version="1.0"?>
<doc>
    <assembly>
        <name>realtime.messaging</name>
    </assembly>
    <members>
        <member name="T:Realtime.Messaging.Ortc.ChannelPermissions">
            <summary>
            The channel permission.
            </summary>
        </member>
        <member name="F:Realtime.Messaging.Ortc.ChannelPermissions.Read">
            <summary>
            Read permission
            </summary>
        </member>
        <member name="F:Realtime.Messaging.Ortc.ChannelPermissions.Write">
            <summary>
            Read and Write permission
            </summary>
        </member>
        <member name="F:Realtime.Messaging.Ortc.ChannelPermissions.Presence">
            <summary>
            Presence permission
            </summary>
        </member>
        <member name="T:Realtime.Messaging.Ortc.AuthenticationClient">
            <summary>
            ORTC server side API that contains ORTC factories as plug-ins.
            </summary>
        </member>
        <member name="M:Realtime.Messaging.Ortc.AuthenticationClient.PostAuthenticationAsync(System.String,System.Boolean,System.String,System.Boolean,System.String,System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,Realtime.Messaging.Ortc.ChannelPermissions})">
            <summary>
            Saves the authentication token channels permissions in the ORTC server.
            </summary>
            <param name="url">ORTC server URL.</param>
            <param name="isCluster">Indicates whether the ORTC server is in a cluster.</param>
            <param name="authenticationToken">Authentication Token which is generated by the application server, for instance a unique session ID.</param>
            <param name="authenticationTokenIsPrivate">Indicates whether the authentication token is private (1) or not (0).</param>
            <param name="applicationKey">Application Key that was provided to you together with the ORTC service purchasing.</param>
            <param name="timeToLive">The authentication token time to live, in other words, the allowed activity time (in seconds).</param>
            <param name="privateKey">The private key provided to you together with the ORTC service purchasing.</param>
            <param name="permissions">The channels and their permissions (w: write/read or r: read, case sensitive).</param>
            <returns>True if the authentication was successful or false if it was not.</returns>
        </member>
        <member name="M:Realtime.Messaging.Ortc.AuthenticationClient.PostAuthenticationAsync(System.String,System.Boolean,System.String,System.Boolean,System.String,System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Realtime.Messaging.Ortc.ChannelPermissions}})">
            <summary>
            Saves the authentication token channels permissions in the ORTC server.
            </summary>
            <param name="url">ORTC server URL.</param>
            <param name="isCluster">Indicates whether the ORTC server is in a cluster.</param>
            <param name="authenticationToken">Authentication Token which is generated by the application server, for instance a unique session ID.</param>
            <param name="authenticationTokenIsPrivate">Indicates whether the authentication token is private (1) or not (0).</param>
            <param name="applicationKey">Application Key that was provided to you together with the ORTC service purchasing.</param>
            <param name="timeToLive">The authentication token time to live, in other words, the allowed activity time (in seconds).</param>
            <param name="privateKey">The private key provided to you together with the ORTC service purchasing.</param>
            <param name="permissions">The channels and their permissions (w: write/read or r: read, case sensitive).</param>
            <returns>True if the authentication was successful or false if it was not.</returns>
        </member>
        <member name="M:Realtime.Messaging.Ortc.AuthenticationClient.PostAuthentication(System.String,System.Boolean,System.String,System.Boolean,System.String,System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Realtime.Messaging.Ortc.ChannelPermissions}})">
            <summary>
            Saves the authentication token channels permissions in the ORTC server.
            </summary>
            <param name="url">ORTC server URL.</param>
            <param name="isCluster">Indicates whether the ORTC server is in a cluster.</param>
            <param name="authenticationToken">Authentication Token which is generated by the application server, for instance a unique session ID.</param>
            <param name="authenticationTokenIsPrivate">Indicates whether the authentication token is private (1) or not (0).</param>
            <param name="applicationKey">Application Key that was provided to you together with the ORTC service purchasing.</param>
            <param name="timeToLive">The authentication token time to live, in other words, the allowed activity time (in seconds).</param>
            <param name="privateKey">The private key provided to you together with the ORTC service purchasing.</param>
            <param name="permissions">The channels and their permissions (w: write/read or r: read, case sensitive).</param>
            <returns>True if the authentication was successful or false if it was not.</returns>
        </member>
        <member name="T:Realtime.Messaging.Ortc.BalancerClient">
            <summary>
            A static class containing all the methods to communicate with the Ortc Balancer 
            </summary>
        </member>
        <member name="M:Realtime.Messaging.Ortc.BalancerClient.GetServerFromBalancerAsync(System.String,System.String)">
            <summary>
            Retrieves an Ortc Server url from the Ortc Balancer
            </summary>
            <param name="balancerUrl">The Ortc Balancer url.</param>
            <param name="applicationKey"></param>
            <remarks></remarks>
        </member>
        <member name="M:Realtime.Messaging.Ortc.BalancerClient.GetServerFromBalance(System.String,System.String)">
            <summary>
            Retrieves an Ortc Server url from the Ortc Balancer
            </summary>
            <param name="balancerUrl">The Ortc Balancer url.</param>
            <param name="applicationKey"></param>
            <remarks></remarks>
        </member>
        <member name="M:Realtime.Messaging.Ortc.BalancerClient.GetServerUrlAsync(System.String,System.Boolean,System.String)">
            <summary>
            Retrieves an Ortc Server url from the Ortc Balancer
            </summary>
            <param name="url"></param>
            <param name="isCluster"></param>
            <param name="applicationKey"></param>
            <returns></returns>
        </member>
        <member name="M:Realtime.Messaging.Ortc.BalancerClient.GetServerUrl(System.String,System.Boolean,System.String)">
            <summary>
            Retrieves an Ortc Server url from the Ortc Balancer
            </summary>
            <param name="url"></param>
            <param name="isCluster"></param>
            <param name="applicationKey"></param>
            <returns></returns>
        </member>
        <member name="T:Realtime.Messaging.Ortc.BufferedMessage">
            <summary>
            Class used for message buffering.
            </summary>
        </member>
        <member name="M:Realtime.Messaging.Ortc.BufferedMessage.#ctor(System.Int32,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="messagePart"></param>
            <param name="message"></param>
        </member>
        <member name="M:Realtime.Messaging.Ortc.BufferedMessage.CompareTo(System.Object)">
            <summary>
            Compares the message parts to put them in ascending order.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Realtime.Messaging.Ortc.ChannelSubscription">
            <summary>
            Details regarding a channel subscription
            </summary>
        </member>
        <member name="M:Realtime.Messaging.Ortc.ChannelSubscription.#ctor(System.Boolean,Realtime.Messaging.Ortc.OnMessageDelegate)">
            <summary>
            Constructor for a new subscription
            </summary>
            <param name="subscribeOnReconnected"></param>
            <param name="onMessage"></param>
        </member>
        <member name="M:Realtime.Messaging.Ortc.ChannelSubscription.#ctor">
            <summary>
            Constructor for a new subscription
            </summary>
        </member>
        <member name="P:Realtime.Messaging.Ortc.ChannelSubscription.IsSubscribing">
            <summary>
            Is subscribing ?
            </summary>
        </member>
        <member name="P:Realtime.Messaging.Ortc.ChannelSubscription.IsSubscribed">
            <summary>
            Is Subscribed ?
            </summary>
        </member>
        <member name="P:Realtime.Messaging.Ortc.ChannelSubscription.SubscribeOnReconnected">
            <summary>
            Option to reconnect on disconnect
            </summary>
        </member>
        <member name="P:Realtime.Messaging.Ortc.ChannelSubscription.OnMessage">
            <summary>
            Channel Message Handler
            </summary>
        </member>
        <member name="T:Realtime.Messaging.Ortc.ClusterClient">
            <summary>
            Http Client for resolving the cluster url
            </summary>
        </member>
        <member name="M:Realtime.Messaging.Ortc.ClusterClient.GetClusterServerAsync(System.String,System.String)">
            <summary>
            Gets the cluster server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Realtime.Messaging.Ortc.ClusterClient.GetClusterServerWithRetryAsync(System.String,System.String)">
            <summary>
            Does the get cluster server logic.
            </summary>
            <param name="url"></param>
            <param name="applicationKey"></param>
            <returns></returns>
        </member>
        <member name="M:Realtime.Messaging.Ortc.ClusterClient.GetClusterServer(System.String,System.String)">
            <summary>
            Gets the cluster server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Realtime.Messaging.Ortc.ClusterClient.GetClusterServerWithRetry(System.String,System.String)">
            <summary>
            Does the get cluster server logic.
            </summary>
            <param name="url"></param>
            <param name="applicationKey"></param>
            <returns></returns>
        </member>
        <member name="M:Realtime.Messaging.Ortc.ClusterClient.ParseResponse(System.String)">
            <summary>
            parses the response
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Realtime.Messaging.Ortc.MessageClient">
            <summary>
            Http Client for messaging
            </summary>
        </member>
        <member name="M:Realtime.Messaging.Ortc.MessageClient.SendMessageAsync(System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends a message to a channel.
            </summary>
            <param name="url">ORTC server URL.</param>
            <param name="isCluster">Indicates whether the ORTC server is in a cluster.</param>
            <param name="authenticationToken">Authentication Token which is generated by the application server, for instance a unique session ID.</param>
            <param name="applicationKey">Application Key that was provided to you together with the ORTC service purchasing.</param>
            <param name="privateKey">The private key provided to you together with the ORTC service purchasing.</param>
            <param name="channel">The channel where the message will be sent.</param>
            <param name="message">The message to send.</param>
            <returns>True if the send was successful or false if it was not.</returns>
        </member>
        <member name="M:Realtime.Messaging.Ortc.MessageClient.SendMessage(System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends a message to a channel.
            </summary>
            <param name="url">ORTC server URL.</param>
            <param name="isCluster">Indicates whether the ORTC server is in a cluster.</param>
            <param name="authenticationToken">Authentication Token which is generated by the application server, for instance a unique session ID.</param>
            <param name="applicationKey">Application Key that was provided to you together with the ORTC service purchasing.</param>
            <param name="privateKey">The private key provided to you together with the ORTC service purchasing.</param>
            <param name="channel">The channel where the message will be sent.</param>
            <param name="message">The message to send.</param>
            <returns>True if the send was successful or false if it was not.</returns>
        </member>
        <member name="T:Realtime.Messaging.Ortc.OnConnectedDelegate">
            <summary>
                Occurs when the client connects to the gateway.
            </summary>
        </member>
        <member name="T:Realtime.Messaging.Ortc.OnDisconnectedDelegate">
            <summary>
                Occurs when the client disconnects from the gateway.
            </summary>
        </member>
        <member name="T:Realtime.Messaging.Ortc.OnSubscribedDelegate">
            <summary>
                Occurs when the client subscribed to a channel.
            </summary>
        </member>
        <member name="T:Realtime.Messaging.Ortc.OnUnsubscribedDelegate">
            <summary>
                Occurs when the client unsubscribed from a channel.
            </summary>
        </member>
        <member name="T:Realtime.Messaging.Ortc.OnExceptionDelegate">
            <summary>
                Occurs when there is an exception.
            </summary>
        </member>
        <member name="T:Realtime.Messaging.Ortc.OnReconnectingDelegate">
            <summary>
                Occurs when the client attempts to reconnect to the gateway.
            </summary>
        </member>
        <member name="T:Realtime.Messaging.Ortc.OnReconnectedDelegate">
            <summary>
                Occurs when the client reconnected to the gateway.
            </summary>
        </member>
        <member name="T:Realtime.Messaging.Ortc.OnMessageDelegate">
            <summary>
                Occurs when the client receives a message in the specified channel.
            </summary>
        </member>
        <member name="T:Realtime.Messaging.Ortc.OrtcClient">
            <summary>
                Represents a <see cref="T:Realtime.Messaging.Ortc.OrtcClient"/> that connects to a specified gateway.
            </summary>
        </member>
        <member name="F:Realtime.Messaging.Ortc.OrtcClient.MAX_MESSAGE_SIZE">
            <summary>
                Message maximum size in bytes
            </summary>
            <exclude />
        </member>
        <member name="F:Realtime.Messaging.Ortc.OrtcClient.MAX_CHANNEL_SIZE">
            <summary>
                Channel maximum size in bytes
            </summary>
            <exclude />
        </member>
        <member name="F:Realtime.Messaging.Ortc.OrtcClient.MAX_CONNECTION_METADATA_SIZE">
            <summary>
                Connection Metadata maximum size in bytes
            </summary>
            <exclude />
        </member>
        <member name="F:Realtime.Messaging.Ortc.OrtcClient.SESSION_STORAGE_NAME">
            <summary>
                Session storage name
            </summary>
        </member>
        <member name="M:Realtime.Messaging.Ortc.OrtcClient.Connect(System.String,System.String)">
            <summary>
                Connects to the gateway with the application key and authentication token. The gateway must be set before using
                this method.
            </summary>
            <param name="applicationKey">Your application key to use ORTC.</param>
            <param name="authenticationToken">Authentication token that identifies your permissions.</param>
            <example>
                <code>
            ortcClient.Connect("myApplicationKey", "myAuthenticationToken");
              </code>
            </example>
        </member>
        <member name="M:Realtime.Messaging.Ortc.OrtcClient.Disconnect">
            <summary>
                Disconnects from the gateway.
            </summary>
            <example>
                <code>
            ortcClient.Disconnect();
              </code>
            </example>
        </member>
        <member name="M:Realtime.Messaging.Ortc.OrtcClient.Subscribe(System.String,Realtime.Messaging.Ortc.OnMessageDelegate)">
            <summary>
                Subscribes to a channel.
            </summary>
            <param name="channel">Channel name.</param>
            <param name="onMessage"><see cref="T:Realtime.Messaging.Ortc.OnMessageDelegate"/> callback.</param>
            <example>
                <code>
            ortcClient.Subscribe("channelName", true, OnMessageCallback);
            private void OnMessageCallback(object sender, string channel, string message)
            {
            // Do something
            }
              </code>
            </example>
        </member>
        <member name="M:Realtime.Messaging.Ortc.OrtcClient.Unsubscribe(System.String)">
            <summary>
                Unsubscribes from a channel.
            </summary>
            <param name="channel">Channel name.</param>
            <example>
                <code>
            ortcClient.Unsubscribe("channelName");
              </code>
            </example>
        </member>
        <member name="M:Realtime.Messaging.Ortc.OrtcClient.Send(System.String,System.String)">
            <summary>
                Sends a message to a channel.
            </summary>
            <param name="channel">Channel name.</param>
            <param name="message">Message to be sent.</param>
            <example>
                <code>
            ortcClient.Send("channelName", "messageToSend");
              </code>
            </example>
        </member>
        <member name="M:Realtime.Messaging.Ortc.OrtcClient.SendProxy(System.String,System.String,System.String,System.String)">
            <summary>
            Not implemented
            </summary>
            <param name="applicationKey"></param>
            <param name="privateKey"></param>
            <param name="channel"></param>
            <param name="message"></param>
        </member>
        <member name="M:Realtime.Messaging.Ortc.OrtcClient.IsSubscribed(System.String)">
            <summary>
                Indicates whether is subscribed to a channel.
            </summary>
            <param name="channel">The channel name.</param>
            <returns>
                <c>true</c> if subscribed to the channel; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Realtime.Messaging.Ortc.OrtcClient.ReadLocalStorage(System.String,System.Int32)">
            <summary>
                Reads the SessionID from local storage.
            </summary>
            <param name="applicationKey">The application key.</param>
            <param name="sessionExpirationTime">The session expiration time.</param>
            <returns></returns>
        </member>
        <member name="M:Realtime.Messaging.Ortc.OrtcClient.CreateLocalStorage(System.String)">
            <summary>
               Writes the Session ID to the local storage.
            </summary>
            <param name="applicationKey">The application key.</param>
        </member>
        <member name="M:Realtime.Messaging.Ortc.OrtcClient.SplitMessage(System.Byte[],System.String)">
            <summary>
                Splits the message to conform with MAX_MESSAGE_SIZE
            </summary>
            <param name="channelBytes"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="P:Realtime.Messaging.Ortc.OrtcClient.Id">
            <summary>
                Gets or sets the client object identifier.
            </summary>
            <value>Object identifier.</value>
        </member>
        <member name="P:Realtime.Messaging.Ortc.OrtcClient.SessionId">
            <summary>
                Gets or sets the session id.
            </summary>
            <value>
                The session id.
            </value>
        </member>
        <member name="P:Realtime.Messaging.Ortc.OrtcClient.IsConnecting">
            <summary>
                Gets a value indicating whether this client object is connected.
            </summary>
            <value>
                <c>true</c> if this client is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Realtime.Messaging.Ortc.OrtcClient.IsConnected">
            <summary>
                Gets a value indicating whether this client object is connecting
            </summary>
            <value>
                <c>true</c> if this client is connecting; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Realtime.Messaging.Ortc.OrtcClient.IsCluster">
            <summary>
                Gets a value indicating whether this instance is clustered.
            </summary>
            <value>
                <c>true</c> if this instance is cluster; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Realtime.Messaging.Ortc.OrtcClient.HeartbeatFails">
            <summary>
                Gets or sets a value indicating how many times can the client fail the heartbeat.
            </summary>
            <value>
                Failure limit.
            </value>
        </member>
        <member name="P:Realtime.Messaging.Ortc.OrtcClient.Url">
            <summary>
                Gets or sets the gateway URL.
            </summary>
            <value>Gateway URL where the socket is going to connect.</value>
        </member>
        <member name="P:Realtime.Messaging.Ortc.OrtcClient.ClusterUrl">
            <summary>
                Gets or sets the cluster gateway URL.
            </summary>
        </member>
        <member name="P:Realtime.Messaging.Ortc.OrtcClient.ConnectionTimeout">
            <summary>
                Gets or sets the connection timeout. Default value is 5000 miliseconds.
            </summary>
        </member>
        <member name="P:Realtime.Messaging.Ortc.OrtcClient.ConnectionMetadata">
            <summary>
                Gets or sets the client connection metadata.
            </summary>
        </member>
        <member name="P:Realtime.Messaging.Ortc.OrtcClient.AnnouncementSubChannel">
            <summary>
                Gets or sets the client announcement subchannel.
            </summary>
        </member>
        <member name="P:Realtime.Messaging.Ortc.OrtcClient.HeartbeatActive">
            <summary>
                Gets or sets a value indicating whether this client has a heartbeat activated.
            </summary>
            <value>
                <c>true</c> if the heartbeat is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Realtime.Messaging.Ortc.OrtcClient.HeartbeatTime">
            <summary>
                Gets or sets the heartbeat interval.
            </summary>
            <value>
                Interval in seconds between heartbeats.
            </value>
        </member>
        <member name="E:Realtime.Messaging.Ortc.OrtcClient.OnConnected">
            <summary>
                Occurs when a connection attempt was successful.
            </summary>
        </member>
        <member name="E:Realtime.Messaging.Ortc.OrtcClient.OnDisconnected">
            <summary>
                Occurs when the client connection terminated.
            </summary>
        </member>
        <member name="E:Realtime.Messaging.Ortc.OrtcClient.OnSubscribed">
            <summary>
                Occurs when the client subscribed to a channel.
            </summary>
        </member>
        <member name="E:Realtime.Messaging.Ortc.OrtcClient.OnUnsubscribed">
            <summary>
                Occurs when the client unsubscribed from a channel.
            </summary>
        </member>
        <member name="E:Realtime.Messaging.Ortc.OrtcClient.OnException">
            <summary>
                Occurs when there is an error.
            </summary>
        </member>
        <member name="E:Realtime.Messaging.Ortc.OrtcClient.OnReconnecting">
            <summary>
                Occurs when a client attempts to reconnect.
            </summary>
        </member>
        <member name="E:Realtime.Messaging.Ortc.OrtcClient.OnReconnected">
            <summary>
                Occurs when a client reconnected.
            </summary>
        </member>
        <member name="T:Realtime.Messaging.Ortc.OrtcClientFactory">
            <summary>
            Responsible for providing the correct OrtcClient per the current Unity3d Platform
            </summary>
        </member>
        <member name="M:Realtime.Messaging.Ortc.OrtcClientFactory.CreateClient">
            <summary>
            creates a new Ortc client
            </summary>
            <returns></returns>
        </member>
        <member name="T:Realtime.Messaging.Ortc.OrtcExceptionReason">
            <summary>
            The exception returned by the ORTC cleint
            </summary>
        </member>
        <member name="F:Realtime.Messaging.Ortc.OrtcExceptionReason.GenericError">
            <summary>
            Undefined error
            </summary>
        </member>
        <member name="F:Realtime.Messaging.Ortc.OrtcExceptionReason.Unauthorized">
            <summary>
            Not authorized
            </summary>
        </member>
        <member name="F:Realtime.Messaging.Ortc.OrtcExceptionReason.Timeout">
            <summary>
            Failed to receive a response
            </summary>
        </member>
        <member name="F:Realtime.Messaging.Ortc.OrtcExceptionReason.ConnectionError">
            <summary>
            Communication Error
            </summary>
        </member>
        <member name="F:Realtime.Messaging.Ortc.OrtcExceptionReason.ServerError">
            <summary>
            Server Error
            </summary>
        </member>
        <member name="F:Realtime.Messaging.Ortc.OrtcExceptionReason.InvalidArguments">
            <summary>
            Bad Arguments
            </summary>
        </member>
        <member name="T:Realtime.Messaging.Ortc.OrtcException">
            <summary>
            An exception thrown by the Ortc service client.
            Includes a Logic friendly reason code.
            </summary>
        </member>
        <member name="M:Realtime.Messaging.Ortc.OrtcException.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Realtime.Messaging.Ortc.OrtcException.#ctor(Realtime.Messaging.Ortc.OrtcExceptionReason)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Realtime.Messaging.Ortc.OrtcException.#ctor(Realtime.Messaging.Ortc.OrtcExceptionReason,System.String,System.Exception)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Realtime.Messaging.Ortc.OrtcException.#ctor(Realtime.Messaging.Ortc.OrtcExceptionReason,System.Exception)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Realtime.Messaging.Ortc.OrtcException.#ctor(Realtime.Messaging.Ortc.OrtcExceptionReason,System.String)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Realtime.Messaging.Ortc.OrtcException.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="P:Realtime.Messaging.Ortc.OrtcException.Reason">
            <summary>
            Logic friendly exception reason
            </summary>
        </member>
        <member name="T:Realtime.Messaging.Ortc.Presence">
            <summary>
            Presence info, such as total subscriptions and metadata.
            </summary>
        </member>
        <member name="M:Realtime.Messaging.Ortc.Presence.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Realtime.Messaging.Ortc.PresenceClient"/> class.
            </summary>
        </member>
        <member name="P:Realtime.Messaging.Ortc.Presence.Subscriptions">
            <summary>
            Gets the subscriptions value.
            </summary>
        </member>
        <member name="P:Realtime.Messaging.Ortc.Presence.Metadata">
            <summary>
            Gets the first 100 unique metadata.
            </summary>
        </member>
        <member name="T:Realtime.Messaging.Ortc.PresenceClient">
            <summary>
            Static client for accessing presence data
            </summary>
        </member>
        <member name="M:Realtime.Messaging.Ortc.PresenceClient.Deserialize(System.String)">
            <summary>
            Deserializes the specified json string to a presence object.
            </summary>
            <param name="message">Json string to deserialize.</param>
            <returns></returns>
        </member>
        <member name="M:Realtime.Messaging.Ortc.PresenceClient.GetPresenceAsync(System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Gets the subscriptions in the specified channel and if active the first 100 unique metadata.
            </summary>
            <param name="url">Server containing the presence service.</param>
            <param name="isCluster">Specifies if url is cluster.</param>
            <param name="applicationKey">Application key with access to presence service.</param>
            <param name="authenticationToken">Authentication token with access to presence service.</param>
            <param name="channel">Channel with presence data active.</param>
        </member>
        <member name="M:Realtime.Messaging.Ortc.PresenceClient.EnablePresenceAsync(System.String,System.Boolean,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Enables presence for the specified channel with first 100 unique metadata if metadata is set to true.
            </summary>
            <param name="url">Server containing the presence service.</param>
            <param name="isCluster">Specifies if url is cluster.</param>
            <param name="applicationKey">Application key with access to presence service.</param>
            <param name="privateKey">The private key provided when the ORTC service is purchased.</param>
            <param name="channel">Channel to activate presence.</param>
            <param name="metadata">Defines if to collect first 100 unique metadata.</param>
        </member>
        <member name="M:Realtime.Messaging.Ortc.PresenceClient.DisablePresenceAsync(System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Disables presence for the specified channel.
            </summary>
            <param name="url">Server containing the presence service.</param>
            <param name="isCluster">Specifies if url is cluster.</param>
            <param name="applicationKey">Application key with access to presence service.</param>
            <param name="privateKey">The private key provided when the ORTC service is purchased.</param>
            <param name="channel">Channel to disable presence.</param>
        </member>
        <member name="M:Realtime.Messaging.Ortc.PresenceClient.GetPresence(System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Gets the subscriptions in the specified channel and if active the first 100 unique metadata.
            </summary>
            <param name="url">Server containing the presence service.</param>
            <param name="isCluster">Specifies if url is cluster.</param>
            <param name="applicationKey">Application key with access to presence service.</param>
            <param name="authenticationToken">Authentication token with access to presence service.</param>
            <param name="channel">Channel with presence data active.</param>
        </member>
        <member name="M:Realtime.Messaging.Ortc.PresenceClient.EnablePresence(System.String,System.Boolean,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Enables presence for the specified channel with first 100 unique metadata if metadata is set to true.
            </summary>
            <param name="url">Server containing the presence service.</param>
            <param name="isCluster">Specifies if url is cluster.</param>
            <param name="applicationKey">Application key with access to presence service.</param>
            <param name="privateKey">The private key provided when the ORTC service is purchased.</param>
            <param name="channel">Channel to activate presence.</param>
            <param name="metadata">Defines if to collect first 100 unique metadata.</param>
        </member>
        <member name="M:Realtime.Messaging.Ortc.PresenceClient.DisablePresence(System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Disables presence for the specified channel.
            </summary>
            <param name="url">Server containing the presence service.</param>
            <param name="isCluster">Specifies if url is cluster.</param>
            <param name="applicationKey">Application key with access to presence service.</param>
            <param name="privateKey">The private key provided when the ORTC service is purchased.</param>
            <param name="channel">Channel to disable presence.</param>
        </member>
        <member name="T:Realtime.Messaging.Ortc.StringExtensions">
            <summary>
            Class used for String methods extensions.
            </summary>
        </member>
        <member name="M:Realtime.Messaging.Ortc.StringExtensions.OrtcIsValidInput(System.String)">
            <summary>
            Checks if the input is valid.
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Realtime.Messaging.Ortc.StringExtensions.OrtcIsValidUrl(System.String)">
            <summary>
            Checks if the URL is valid.
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="T:Realtime.Messaging.Ortc.Strings">
            <summary>
            Class used for operations with strings.
            </summary>
        </member>
        <member name="M:Realtime.Messaging.Ortc.Strings.RandomNumber(System.Int32,System.Int32)">
            <summary>
            Randoms the number.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns></returns>
        </member>
        <member name="M:Realtime.Messaging.Ortc.Strings.RandomString(System.Int32)">
            <summary>
            Randoms the string.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Realtime.Messaging.Ortc.Strings.GenerateId(System.Int32)">
            <summary>
            Generates an id.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Realtime.Messaging.RealtimePermission">
            <summary>
            Channel Permission Instructions
            </summary>
        </member>
        <member name="F:Realtime.Messaging.RealtimePermission.Channel">
            <summary>
            Channel Name
            </summary>
        </member>
        <member name="F:Realtime.Messaging.RealtimePermission.Permission">
            <summary>
            Permission
            </summary>
        </member>
        <member name="T:Realtime.Messaging.OnConnectionChangedDelegate">
            <summary>
            Occurs when the client connects to the gateway.
            </summary>
        </member>
        <member name="T:Realtime.Messaging.OnChannelMessageDelegate">
            <summary>
            Occurs when there is an exception.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Realtime.Messaging.ConnectionState">
            <summary>
            Describes the status of a connection
            </summary>
        </member>
        <member name="F:Realtime.Messaging.ConnectionState.Disconnected">
            <summary>
            Not connected
            </summary>
        </member>
        <member name="F:Realtime.Messaging.ConnectionState.Connecting">
            <summary>
            Is Connecting
            </summary>
        </member>
        <member name="F:Realtime.Messaging.ConnectionState.Reconnecting">
            <summary>
            Lost connection
            </summary>
        </member>
        <member name="F:Realtime.Messaging.ConnectionState.Connected">
            <summary>
            connected
            </summary>
        </member>
        <member name="F:Realtime.Messaging.ConnectionState.Paused">
            <summary>
            Disconnected with saved subscriptions
            </summary>
        </member>
        <member name="F:Realtime.Messaging.ConnectionState.Pausing">
            <summary>
            Is disconnecting with saved subscriptions
            </summary>
        </member>
        <member name="F:Realtime.Messaging.ConnectionState.Resuming">
            <summary>
            Is reconnecting with saved subscriptions
            </summary>
        </member>
        <member name="T:Realtime.Messaging.SubscriptionState">
            <summary>
            describes the current status of a channel subscription
            </summary>
        </member>
        <member name="F:Realtime.Messaging.SubscriptionState.Unsubscribed">
            <summary>
            Not receiving messages
            </summary>
        </member>
        <member name="F:Realtime.Messaging.SubscriptionState.Subscribing">
            <summary>
            Waiting for subscription confirmation
            </summary>
        </member>
        <member name="F:Realtime.Messaging.SubscriptionState.Resubscribing">
            <summary>
            Connection was lost and is reconnecting
            </summary>
        </member>
        <member name="F:Realtime.Messaging.SubscriptionState.Subscribed">
            <summary>
            Receiving messages
            </summary>
        </member>
        <member name="F:Realtime.Messaging.SubscriptionState.Paused">
            <summary>
            Subscription will occur on resume
            </summary>
        </member>
        <member name="T:Realtime.Messaging.RealtimeUrl">
            <summary>
            Url for the realtime network
            </summary>
        </member>
        <member name="F:Realtime.Messaging.RealtimeUrl.Path">
            <summary>
            The url to the server
            </summary>
        </member>
        <member name="F:Realtime.Messaging.RealtimeUrl.IsCluster">
            <summary>
            Is this server a cluster
            </summary>
        </member>
        <member name="T:Realtime.Messaging.RealtimeMessenger">
            <summary>
            A Unity-Friendly messenger api using the IBT.ORTC service
            </summary>
        </member>
        <member name="F:Realtime.Messaging.RealtimeMessenger.Listeners">
            <summary>
            Collection of all message handlers : Channel Name by a list of handlers
            </summary>
        </member>
        <member name="F:Realtime.Messaging.RealtimeMessenger.SubscriptionStates">
            <summary>
            All subscriptions : Channel Name by The current state of the subscription
            </summary>
        </member>
        <member name="M:Realtime.Messaging.RealtimeMessenger.#ctor(Realtime.Messaging.Ortc.OrtcClient)">
            <summary>
            Creates a new messenger with the default url
            </summary>
        </member>
        <member name="M:Realtime.Messaging.RealtimeMessenger.#ctor">
            <summary>
            Creates a new messenger with the default url
            </summary>
        </member>
        <member name="M:Realtime.Messaging.RealtimeMessenger.Connect">
            <summary>
            Begins a Connection Task.
            Be sure to set your AuthenticationToken and Metadata First !
            </summary>
            <returns>A task for the duration of the process</returns>
        </member>
        <member name="M:Realtime.Messaging.RealtimeMessenger.Disconnect">
            <summary>
            Begins Disconnection
            </summary>
            <returns>A task for the duration of the process</returns>
        </member>
        <member name="M:Realtime.Messaging.RealtimeMessenger.Resume">
            <summary>
            Begins a Resume Task.
            Will reconnect and reapply paused subscriptions
            </summary>
            <returns>A task for the duration of the process</returns>
        </member>
        <member name="M:Realtime.Messaging.RealtimeMessenger.Pause">
            <summary>
            Disconnects but caches subscriptions. Call Resume to resubscribe from cache.
            </summary>
            <returns>A task for the duration of the process</returns>
        </member>
        <member name="M:Realtime.Messaging.RealtimeMessenger.Subscribe(System.String)">
            <summary>
            Begins subscription to the ORTC channel
            </summary>
            <param name="channel"></param>
            <returns>A task for the duration of the process</returns>
        </member>
        <member name="M:Realtime.Messaging.RealtimeMessenger.Unsubscribe(System.String)">
            <summary>
            Begins unsubscription to the ORTC channel
            </summary>
            <param name="channel"></param>
            <returns>A task for the duration of the process</returns>
        </member>
        <member name="M:Realtime.Messaging.RealtimeMessenger.Send(System.String,System.String)">
            <summary>
            Sends a message to the specific channel
            </summary>
            <param name="channel"></param>
            <param name="message"></param>
            <returns>A task for the duration of the process</returns>
        </member>
        <member name="M:Realtime.Messaging.RealtimeMessenger.GetSubscriptionState(System.String)">
            <summary>
            Returns the subscription state of the channel
            </summary>
            <param name="channel"></param>
            <returns>The current subscription state for the channel</returns>
        </member>
        <member name="M:Realtime.Messaging.RealtimeMessenger.AddListener(System.String,Realtime.Messaging.OnChannelMessageDelegate)">
            <summary>
            Adds a handler for a specific channel
            </summary>
            <param name="channel">the channel to listen to</param>
            <param name="action">the message received action handler </param>
        </member>
        <member name="M:Realtime.Messaging.RealtimeMessenger.RemoveListener(System.String,Realtime.Messaging.OnChannelMessageDelegate)">
            <summary>
            Removes a message handler for a specific channel
            </summary>
            <param name="channel">the channel to listen to</param>
            <param name="action">the message received action handler </param>
        </member>
        <member name="M:Realtime.Messaging.RealtimeMessenger.WaitForConnected">
            <summary>
            Wait coroutine for waiting for the connection state to == Connected
            </summary>
            <returns>A coroutine method</returns>
        </member>
        <member name="M:Realtime.Messaging.RealtimeMessenger.PostAuthentication(System.Collections.Generic.IEnumerable{Realtime.Messaging.RealtimePermission})">
            <summary>
            Posts an authentication token to the network.
            This token may then be used by a connecting client to gain access 
            </summary>
            <remarks>
            - Authentication may be disabled (if you want)
            - It is suggested you do not authenticate from the client, but, a webserver
            </remarks>
            <returns>A task with true if authenticated</returns>
        </member>
        <member name="M:Realtime.Messaging.RealtimeMessenger.GetPresence(System.String,System.String)">
            <summary>
            Returns the metadata for a channel
            </summary>
            <param name="authenticationToken">Current Authentication token</param>
            <param name="channel"></param>
            <returns>A task with the current presence state</returns>
        </member>
        <member name="M:Realtime.Messaging.RealtimeMessenger.EnablePresence(System.String,System.Boolean)">
            <summary>
            Enables Presence
            </summary>
            <param name="channel">channel to enable</param>
            <param name="metadata">If should collect the first 100 unique metadata</param>
            <returns>A task with the current presence state</returns>
        </member>
        <member name="M:Realtime.Messaging.RealtimeMessenger.DisabledPresence(System.String)">
            <summary>
            Disables Presence
            </summary>
            <param name="channel">channel to disable</param>
            <returns>A task with the current presence state</returns>
        </member>
        <member name="P:Realtime.Messaging.RealtimeMessenger.State">
            <summary>
            Current connection state
            </summary>
        </member>
        <member name="P:Realtime.Messaging.RealtimeMessenger.IsConnected">
            <summary>
             State == ConnectionState.Connected
            </summary>
        </member>
        <member name="P:Realtime.Messaging.RealtimeMessenger.SessionId">
            <summary>
            Unique identifier set be the server for this connection
            </summary>
        </member>
        <member name="P:Realtime.Messaging.RealtimeMessenger.Id">
            <summary>
            Unique identifier for this client
            </summary>
        </member>
        <member name="P:Realtime.Messaging.RealtimeMessenger.ConnectionMetadata">
            <summary> 
            UserName or UserId
            </summary>
            <remarks>
            Should be set prior to connection.
            </remarks>
        </member>
        <member name="P:Realtime.Messaging.RealtimeMessenger.AnnouncementSubChannel">
            <summary> 
            Gets or sets the client announcement subchannel.
            </summary>
        </member>
        <member name="P:Realtime.Messaging.RealtimeMessenger.Url">
            <summary>
            Url for the Realtime Service
            </summary>
        </member>
        <member name="P:Realtime.Messaging.RealtimeMessenger.ApplicationKey">
            <summary>
            Default Application Key.
            Acquired from RealtimeSettings 
            </summary>
        </member>
        <member name="P:Realtime.Messaging.RealtimeMessenger.PrivateKey">
            <summary>
            Default Private Key. Used for authentication.
            Acquired from RealtimeSettings 
            </summary>
        </member>
        <member name="P:Realtime.Messaging.RealtimeMessenger.AuthenticationTime">
            <summary>
            Time for an authentication token to live in seconds.
            Expires after inactivity.
            </summary>
        </member>
        <member name="P:Realtime.Messaging.RealtimeMessenger.AuthenticationIsPrivate">
            <summary>
            Restricts authentication token's use to a single client
            </summary>
        </member>
        <member name="P:Realtime.Messaging.RealtimeMessenger.AuthenticationToken">
            <summary>
            Current Authentication Token
            </summary>
        </member>
        <member name="P:Realtime.Messaging.RealtimeMessenger.IsPaused">
            <summary>
            Indicates that client is disconnected and has cached subscriptions.
            Call Resume to reconnect and reapply cached subscriptions.
            </summary>
        </member>
        <member name="P:Realtime.Messaging.RealtimeMessenger.Client">
            <summary>
            The ortc client.
            </summary>
        </member>
        <member name="E:Realtime.Messaging.RealtimeMessenger.OnConnectionChanged">
            <summary>
            Raised when the connection status of the client has changed
            </summary>
        </member>
        <member name="E:Realtime.Messaging.RealtimeMessenger.OnException">
            <summary>
            Raised when a message is received
            </summary>
        </member>
        <member name="E:Realtime.Messaging.RealtimeMessenger.OnMessage">
            <summary>
            Raised when a message is received
            </summary>
        </member>
        <member name="T:Realtime.Messaging.RealtimeMessengerSettings">
            <summary>
            client configuration and factory
            </summary>
        </member>
        <member name="M:Realtime.Messaging.RealtimeMessengerSettings.InitService">
            <summary>
            Initializes the RealtimeMessanger Services if not initialized.
            </summary>
        </member>
        <member name="F:Realtime.Messaging.RealtimeMessengerSettings.ApplicationKey">
            <summary>
            REPLACE WITH UOUR APPLICATION KEY
            </summary>
        </member>
        <member name="F:Realtime.Messaging.RealtimeMessengerSettings.PrivateKey">
            <summary>
            OPTIONAL : REPLACE WITH UOUR PRIVATE KEY.
            REQUIRED FOR AUTHENTICATION AND PRESENCE
            </summary>
        </member>
        <member name="F:Realtime.Messaging.RealtimeMessengerSettings.HideSockets">
            <summary>
            Hides the socket Dll
            </summary>
        </member>
        <member name="F:Realtime.Messaging.RealtimeMessengerSettings.Url">
            <summary>
            service URL
            </summary>
        </member>
        <member name="F:Realtime.Messaging.RealtimeMessengerSettings.IsCluster">
            <summary>
            SERVICE URL IS CLUSTER
            </summary>
        </member>
        <member name="F:Realtime.Messaging.RealtimeMessengerSettings.AuthenticationTime">
            <summary>
            In Seconds. 1800 = 30 min
            </summary>
        </member>
        <member name="F:Realtime.Messaging.RealtimeMessengerSettings.AuthenticationIsPrivate">
            <summary>
            Only one connection can use this token since it's private for each user
            </summary>
        </member>
        <member name="M:Realtime.Messaging.RealtimeMessengerSettings.ResetToDefault">
            <summary>
            Resets all settings to default
            </summary>
        </member>
        <member name="P:Realtime.Messaging.RealtimeMessengerSettings.Instance">
            <summary>
            Access for the Network Manager
            </summary>
        </member>
    </members>
</doc>
